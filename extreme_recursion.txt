- - - - - - Q - - - - - - - - - - - - - - - - - -
- - - - - - - - - Q - - - - - - - - - - - - - - -
- - - - - - - Q - - - - - - - - - - - - - - - - -
- - - - - Q - - - - - - - - - - - - - - - - - - -
- - - - - - - - Q - - - - - - - - - - - - - - - -
- - - - - - - - - - - - - - - - - - - - - Q - - -
- - - - - - - - - - - - - - - - - - - - - - - - Q
- - - - - - - - - - - - - - - - - - - - - - Q - -
- - - - - - - - - - - - - - - - - - - - Q - - - -
- - - - - - - - - - - - - - - - - - - - - - - Q -
- - - - - - - - - - - - - Q - - - - - - - - - - -
- - - - - - - - - - Q - - - - - - - - - - - - - -
- - - - - - - - - - - - Q - - - - - - - - - - - -
- - - - - - - - - - - - - - Q - - - - - - - - - -
- - - - - - - - - - - Q - - - - - - - - - - - - -
- Q - - - - - - - - - - - - - - - - - - - - - - -
- - - - Q - - - - - - - - - - - - - - - - - - - -
- - Q - - - - - - - - - - - - - - - - - - - - - -
Q - - - - - - - - - - - - - - - - - - - - - - - -
- - - Q - - - - - - - - - - - - - - - - - - - - -
- - - - - - - - - - - - - - - - Q - - - - - - - -
- - - - - - - - - - - - - - - - - - - Q - - - - -
- - - - - - - - - - - - - - - - - Q - - - - - - -
- - - - - - - - - - - - - - - Q - - - - - - - - -
- - - - - - - - - - - - - - - - - - Q - - - - - -

[18, 15, 17, 19, 16, 3, 0, 2, 4, 1, 11, 14, 12, 10, 13, 23, 20, 22, 24, 21, 8, 5, 7, 9, 6]

- Q - - -
- - - - Q
- - Q - -
Q - - - -
- - - Q -

[3,0,2,4,1]

def evolution(solution)
  result = []
  size = solution.count
  solution.each do |ci|
    cs = my_solution(solution, ci)
    cs.each do |e|
      result << (size * ci + e)
    end
  end
  result
end

def my_solution(solution, ci)
  ci == solution.count / 2 ? mirror(solution) : solution
end

def mirror(input = [])
  max_length = (input.length - 1)
  output = []
  (input.length/2.0).round.times do |i|
    output[i] = check(input[max_length - i])
    output[max_length - i] = check(input[i]) if (max_length - i != i)
  end
  output
end

def check(input)
  input.instance_of?(Array) ? mirror(input) : input
end
